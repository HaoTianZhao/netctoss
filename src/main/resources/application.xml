<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!--开启包扫描-->
    <context:component-scan base-package="com.barista">
        <!--解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--不加在这里，只加在dispatcher-servlet的话，Controller无法自动注入Service类，能运行只报错-->
    <context:component-scan base-package="com.barista.controller"/>







    <!-- 定时任务，配置需要扫描的包，如果用@EnableScheduling则不要此配置，否则会执行两次 -->
    <context:component-scan base-package="com.barista.service"
                            xmlns:context="http://www.springframework.org/schema/context"/>
    <!-- 用于激活那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package scanning的方式）上面的注解 可不配置  -->
    <context:annotation-config/>
    <!--  配置处理定时任务的线程池 -->
    <task:scheduler id="scheduler" pool-size="10"/>
    <!-- 配置处理 异步定时任务的  线程池 -->
    <!--
    　　pool-size:线程池大小   keep-alive:线程最大空闲时间
    　　queue-capacity:队列大小（无线程可用时，其余任务放置队列中，队列放满后其他任务只能等待）
    　　rejection-policy:队列任务数达到最大时，处理其他任务的策略
    -->
    <task:executor id="taskExecutor" pool-size="10" keep-alive="2000"
                   rejection-policy="DISCARD_OLDEST" queue-capacity="10"/>
    <!-- 配置spring定时开关-->
    <task:annotation-driven executor="taskExecutor" scheduler="scheduler"/>







    <!--加载数据库配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--配置druid数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <property name="maxWait" value="${druid.maxWait}"/>
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <property name="timeBetweenEvictionRunsMillis"
                  value="${druid.timeBetweenEvictionRunsMillis}"/>
    </bean>

    <!--配置sqlSession工厂(是mybatis整合spring包下的)-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--配置包别名-->
        <property name="typeAliasesPackage" value="com.barista.entity"/>
        <!--加载所有的mapper文件。(一般使用MapperScannerConfigurer扫描)-->
        <property name="mapperLocations" value="classpath:com/barista/dao/mapper/*.xml"/>

        <!--加载mybatis核心配置文件，一般省略-->
        <!--<property name="configLocation" value="sqlMapConfig.xml"/>-->
    </bean>

    <!--配置mapper包扫描-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.barista.dao"/>

        <!--当有多个数据源和sqlSessionFactory时，指定不同的mapper文件使用不同的数据源-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>


    <!--配置事务管理器-->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>-->

    <!--配置事务-->
    <tx:advice id="myAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" isolation="DEFAULT" propagation="REQUIRED"/>

            <tx:method name="delete*" isolation="DEFAULT" propagation="REQUIRED"/>

            <tx:method name="update*" isolation="DEFAULT" propagation="REQUIRED"/>
            <tx:method name="change*" isolation="DEFAULT" propagation="REQUIRED"/>

            <tx:method name="get*" read-only="true" isolation="DEFAULT" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true" isolation="DEFAULT" propagation="REQUIRED"/>
            <tx:method name="select*" read-only="true" isolation="DEFAULT" propagation="REQUIRED"/>
            <tx:method name="check*" read-only="true" isolation="DEFAULT" propagation="REQUIRED"/>

            <tx:method name="*" read-only="false" isolation="DEFAULT" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>

    <!--配置AOP事务-->
    <aop:config>
        <aop:pointcut id="myPoint" expression="execution(* com.barista.service..*.*(..))"/>
        <aop:advisor advice-ref="myAdvice" pointcut-ref="myPoint"/>
    </aop:config>


</beans>